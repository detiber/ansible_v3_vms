#! ansible-playbook -K
---
- name: Recreate environment
  hosts: localhost
  connection: local
  become: yes
  gather_facts: no
  tasks:
  - name: Shutdown existing VMs
    virt:
      name: "{{ item }}"
      state: destroyed
      uri: "{{ qemu_uri }}"
    with_items: "{{ groups.all_guests }}"
    register: output
    failed_when: false
    tags:
    - teardown
    - machines

  - name: Undefine the existing VMs
    virt:
      name: "{{ item }}"
      command: undefine
      uri: "{{ qemu_uri }}"
    with_items: "{{ groups.all_guests }}"
    failed_when: false
    tags:
    - teardown
    - machines

  - name: Remove vm logical volumes
    lvol:
      vg: "{{ volume_group }}"
      lv: "{{ item }}"
      state: absent
      force: yes
    with_items: "{{ groups.all_guests }}"
    tags:
    - teardown
    - volumes

  - name: Update the libvirt network
    virt_net:
      autostart: yes
      state: active
      name: "{{ network.name }}"
      uri: "{{ qemu_uri }}"
      xml: "{{ lookup('template', 'templates/libvirt_network.xml.j2') }}"
    register: network_update

  - name: Recreate rhel7 vm logical volumes
    command: >
      /sbin/lvcreate -s {{ volume_group }}/{{ hostvars[item].base_image }} -n {{ item }}
    with_items: "{{ groups.guest_hosts }}"
    tags:
    - create
    - volumes

  - name: Enable the vm logical volumes
    command: lvchange -ay -K {{ volume_group }}/{{ item }}
    with_items: "{{ groups.guest_hosts }}"
    tags:
    - create
    - volumes

  - name: Create the VMs
    virt:
      name: "{{ item }}"
      command: define
      xml: "{{ lookup('template', 'templates/libvirt_domain.xml.j2') }}"
      uri: "{{ qemu_uri }}"
    with_items: "{{ groups.guest_hosts }}"
    tags:
    - create
    - machines

  - name: Update the hostname for the VM
    command: >
      virt-edit -c {{ qemu_uri }} -d {{ item }} -e 's/^.*$/{{ item }}.{{ domain_name }}/' /etc/hostname
    with_items: "{{ groups.guest_hosts }}"
    tags:
    - create
    - machines


  - name: Start the VMs
    virt:
      name: "{{ item }}"
      state: running
      uri: "{{ qemu_uri }}"
    with_items: "{{ groups.guest_hosts }}"
    tags:
    - create
    - machines
    register: vm_start

  - name: Wait for hosts to be available
    wait_for: port=22 host={{ item }}.{{ domain_name }}
    with_items: "{{ groups.guest_hosts }}"
    tags:
    - create
    - machines

- name: Bootstrap rhel7 hosts
  hosts: rhel7_only
  remote_user: root
  become: no
  tags:
  - bootstrap
  vars:
    tower_ssh_key: "{{ lookup('file', '~/.ssh/tower_host.pub') }}"
  tasks:
  - copy:
      src: "{{ item }}"
      dest: /etc/yum.repos.d/{{ item }}
    with_items:
    - rhel7.repo
    - rhel7_extras.repo
  - command: yum clean all
  - yum:
      name: "*"
      state: latest

  - name: Copy Tower key to host
    authorized_key:
      user: root
      state: present
      key: "{{ tower_ssh_key }}"


- name: Restart systems
  hosts: guest_hosts
  tasks:
  - name: Restart system
    # https://github.com/ansible/ansible/issues/10616
    shell: sleep 2 && shutdown -r now
    async: 1
    poll: 0
    ignore_errors: true

  - name: Wait for host to start
    become: no
    local_action:
      module: wait_for
      host: "{{ inventory_hostname }}.{{ domain_name }}"
      state: started
      delay: 10
      port: 22

- hosts: localhost
  connection: local
  become: yes
  gather_facts: no
  tasks:
  - name: Cleanup cached facts and files
    file:
      path: "{{ item }}"
      state: absent
    with_items:
    - /tmp/ansible/facts
    - /home/jdetiber/.ansible/cp
    - /home/jdetiber/.ansible/tmp
